<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RetrieveColumns" xml:space="preserve">
    <value>SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE FROM ALL_TAB_COLS WHERE OWNER=:Owner AND TABLE_NAME=:TableName ORDER BY 1</value>
  </data>
  <data name="RetrieveConnectionName" xml:space="preserve">
    <value>select sys_context('USERENV','SESSION_USER') || '@' || sys_context('USERENV','DB_NAME') 
from dual</value>
  </data>
  <data name="RetrieveRelations" xml:space="preserve">
    <value>SELECT AC.OWNER || '.' || AC.TABLE_NAME || ' via ' || AC.CONSTRAINT_NAME CONSTRAINT_NAME, AI.TABLE_OWNER ORIGIN_TABLE_OWNER, AI.TABLE_NAME ORIGIN_TABLE_NAME, AIC.COLUMN_NAME ORIGIN_COLUMN_NAME, AIC.COLUMN_POSITION ORIGIN_COLUMN_POSITION, AC.OWNER FOREIGN_TABLE_OWNER, AC.TABLE_NAME FOREIGN_TABLE_NAME, ACC.COLUMN_NAME FOREIGN_COLUMN_NAME, ACC.POSITION FOREIGN_COLUMN_POSITION
FROM ALL_CONSTRAINTS AC,
     ALL_CONS_COLUMNS ACC,
     ALL_INDEXES AI,
     ALL_IND_COLUMNS AIC
WHERE AC.OWNER = ACC.OWNER AND AC.CONSTRAINT_NAME = ACC.CONSTRAINT_NAME
  AND CONSTRAINT_TYPE = 'R'
  AND AI.OWNER = AC.R_OWNER AND AI.INDEX_NAME = AC.R_CONSTRAINT_NAME
  AND AIC.INDEX_OWNER = AI.OWNER AND AIC.INDEX_NAME = AI.INDEX_NAME
  AND AIC.COLUMN_POSITION = ACC.POSITION
  AND AI.TABLE_OWNER = :Owner
  AND AI.TABLE_NAME = :TableName
ORDER BY CONSTRAINT_NAME, FOREIGN_COLUMN_POSITION</value>
  </data>
  <data name="RetrieveReverseRelations" xml:space="preserve">
    <value>SELECT AI.TABLE_OWNER || '.' || AI.TABLE_NAME || ' via ' || AC.CONSTRAINT_NAME CONSTRAINT_NAME, AI.TABLE_OWNER ORIGIN_TABLE_OWNER, AI.TABLE_NAME ORIGIN_TABLE_NAME, AIC.COLUMN_NAME ORIGIN_COLUMN_NAME, AIC.COLUMN_POSITION ORIGIN_COLUMN_POSITION, AC.OWNER FOREIGN_TABLE_OWNER, AC.TABLE_NAME FOREIGN_TABLE_NAME, ACC.COLUMN_NAME FOREIGN_COLUMN_NAME, ACC.POSITION FOREIGN_COLUMN_POSITION
FROM ALL_CONSTRAINTS AC,
     ALL_CONS_COLUMNS ACC,
     ALL_INDEXES AI,
     ALL_IND_COLUMNS AIC
WHERE AC.OWNER = ACC.OWNER AND AC.CONSTRAINT_NAME = ACC.CONSTRAINT_NAME
  AND CONSTRAINT_TYPE = 'R'
  AND AI.OWNER = AC.R_OWNER AND AI.INDEX_NAME = AC.R_CONSTRAINT_NAME
  AND AIC.INDEX_OWNER = AI.OWNER AND AIC.INDEX_NAME = AI.INDEX_NAME
  AND AIC.COLUMN_POSITION = ACC.POSITION
  AND AC.OWNER = :Owner
  AND AC.TABLE_NAME = :TableName
ORDER BY CONSTRAINT_NAME, FOREIGN_COLUMN_POSITION</value>
  </data>
  <data name="RetrieveSchemas" xml:space="preserve">
    <value>SELECT DISTINCT OWNER FROM ALL_TABLES ORDER BY 1</value>
  </data>
  <data name="RetrieveTables" xml:space="preserve">
    <value>SELECT TABLE_NAME, 'TABLE' OBJECT_TYPE FROM ALL_TABLES WHERE OWNER=:Owner
UNION
SELECT VIEW_NAME, 'VIEW' FROM ALL_VIEWS WHERE OWNER=:Owner
ORDER BY 1</value>
  </data>
</root>